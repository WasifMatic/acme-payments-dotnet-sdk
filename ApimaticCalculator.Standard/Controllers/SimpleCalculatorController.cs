// <copyright file="SimpleCalculatorController.cs" company="APIMatic">
// ApimaticCalculator.Standard
//
// This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
// </copyright>
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using APIMatic.Core;
using APIMatic.Core.Types;
using APIMatic.Core.Utilities;
using APIMatic.Core.Utilities.Date.Xml;
using ApimaticCalculator.Standard;
using ApimaticCalculator.Standard.Http.Client;
using ApimaticCalculator.Standard.Http.Response;
using ApimaticCalculator.Standard.Utilities;
using Newtonsoft.Json.Converters;
using System.Net.Http;

namespace ApimaticCalculator.Standard.Controllers
{
    /// <summary>
    /// SimpleCalculatorController.
    /// </summary>
    public class SimpleCalculatorController : BaseController
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleCalculatorController"/> class.
        /// </summary>
        internal SimpleCalculatorController(GlobalConfiguration globalConfiguration) : base(globalConfiguration) { }

        /// <summary>
        /// Calculates the expression using the specified operation.
        /// </summary>
        /// <param name="operation">Required parameter: The operator to apply on the variables.</param>
        /// <param name="x">Required parameter: The LHS value.</param>
        /// <param name="y">Required parameter: The RHS value.</param>
        /// <returns>Returns the ApiResponse of double response from the API call.</returns>
        public ApiResponse<double> Calculate(
                Models.OperationType operation,
                double x,
                double y)
            => CoreHelper.RunTask(CalculateAsync(operation, x, y));

        /// <summary>
        /// Calculates the expression using the specified operation.
        /// </summary>
        /// <param name="operation">Required parameter: The operator to apply on the variables.</param>
        /// <param name="x">Required parameter: The LHS value.</param>
        /// <param name="y">Required parameter: The RHS value.</param>
        /// <param name="cancellationToken"> cancellationToken. </param>
        /// <returns>Returns the ApiResponse of double response from the API call.</returns>
        public async Task<ApiResponse<double>> CalculateAsync(
                Models.OperationType operation,
                double x,
                double y,
                CancellationToken cancellationToken = default)
            => await CreateApiCall<double>()
              .RequestBuilder(_requestBuilder => _requestBuilder
                  .Setup(HttpMethod.Get, "/{operation}")
                  .Parameters(_parameters => _parameters
                      .Template(_template => _template.Setup("operation", ApiHelper.JsonSerialize(operation).Trim('\"')))
                      .Query(_query => _query.Setup("x", x))
                      .Query(_query => _query.Setup("y", y))))
              .ResponseHandler(_responseHandler => _responseHandler
                  .Deserializer(_response => double.Parse(_response)))
              .ExecuteAsync(cancellationToken).ConfigureAwait(false);
    }
}